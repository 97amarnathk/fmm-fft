---------------------------------------------------------------------------

FMDFT

Version 2:  November, 1997

A package of Fortran subprograms for computing approximate
one-dimensional distributed discrete Fourier transforms using MPI.

Peter McCorquodale, Massachusetts Institute of Technology,
petermc@theory.lcs.mit.edu

---------------------------------------------------------------------------

Source files are in double precision Fortran 77 using MPI.

fmdft.f:  Code for approximate one-dimensional distributed discrete
          Fourier transform using the fast multipole method.

This code requires a sequential one-dimensional forward FFT routine.
We have supplied Netlib's FFTPACK routines.

fftpack.f:  FFT routines from FFTPACK.

fftcall.f:  Fortran code for initializing and calling FFTPACK routines.

To compile a program that uses these routines, link with the compiled
fmdft.o, fftpack.o, and fftcall.o.

---------------------------------------------------------------------------

How to call these routines

---------------------------------------------------------------------------

* First call  mfti  to initialize work arrays.
* Then call  mft  to perform the transform (either forward or backward).

The input vector is taken to be a contiguous array of length  n
over  p  processors labelled 0 through p-1.
After a call to mft, the input is overwritten with the output vector,
which is stored in the same way.

---------------------------------------------------------------------------

subroutine mfti(lq, p, t, b, wkkeep, wktemp, szkeep, sztemp)

---------------------------------------------------------------------------

Subroutine  mfti  initializes the work array  wkkeep  which is used in
mft.  After initializing, the same work array can be used in multiple
calls to  mft, provided that  wkkeep  is not modified between calls.

Every processor must call  mfti.  This routine does not use any
message passing.

Input parameters:

lq      Length of each processor's share of input (= n/p).
        Must be a power of 2.

p       Number of processors.  Must be a power of 2.

t       Number of terms to use in expansions.  The higher  t  is, the
        greater the accuracy, up to approximately  t=15.

b       Number of particles in each "box".  Must be a power of 2,
        1 <= b <= n/p**2.  For most efficiency, pick  b  to be the
        power of 2 closest to 2*t.

szkeep  Length of the double precision work array required by the
        sequential one-dimensional FFT routines for an array of length
        lq, which is not to be modified between calls to the FFT.
        If using FFTPACK (routines supplied), need szkeep >= 4*lq + 15.
        In any case, require szkeep >= 1.

sztemp  Length of the double precision temporary workspace required by
        the sequential one-dimensional FFT routines for an array of
        length lq, which may be modified between calls to the FFT.
        If using FFTPACK (routines supplied), need only sztemp >= 1.
        In any case, require sztemp >= 1.

Output parameter:

wkkeep  Double precision work array of length at least
        szkeep + 8*(t**2)*log2(lq/b) + (3*b + 2*p)*b*p + 2*p*(p + t).
        This array must not be modified between calls to  mft.

Other parameter:

wktemp  Temporary double precision workspace of length at least
        sztemp + 8*t*(p-1)*(lq/b/p + (1+2*t)*log2(lq/b) + log2(p) + 2)
               + 12*p*(b + 3) + 3*t


---------------------------------------------------------------------------

subroutine mft(lq, q, dir, p, id, t, b, wkkeep, wktemp, szkeep, sztemp)

---------------------------------------------------------------------------

Subroutine  mft  performs an approximate forward or backward
one-dimensional discrete Fourier transform on the vector  q.

Every processor calls  mft.  This routine uses message passing.

Input parameters:

lq      Length of each processor's share of input (= n/p).
        Must be a power of 2.

q       Double complex vector of length  lq.  The transform will be
        performed on the concatenation of the vectors in processors
        0 through p-1.
        On output, q will be overwritten with the transform.

dir     +1 for forward transform, -1 for backward transform.

p       Number of processors.  Must be a power of 2.

id      Processor ID, 0 <= id <= p-1.

t       Number of terms to use in expansions.  The higher  t  is, the
        greater the accuracy, up to approximately  t=15.

b       Number of particles in each "box".  Must be a power of 2,
        1 <= b <= n/p**2.  For most efficiency, pick  b  to be the
        power of 2 closest to 2*t.

wkkeep  Double precision work array of length at least
        szkeep + 8*(t**2)*log2(lq/b) + (3*b + 2*p)*b*p + 2*p*(p + t).
        This array comes from mfti.

szkeep  Length of the double precision work array required by the
        sequential one-dimensional FFT routines for an array of
        length lq, which is not to be modified between calls to the FFT.
        If using FFTPACK (routines supplied), need szkeep >= 4*lq + 15.
        In any case, require szkeep >= 1.

sztemp  Length of the double precision temporary workspace required by
        the sequential one-dimensional FFT routines for an array of
        length  lq, which may be modified between calls to the FFT.
        If using FFTPACK (routines supplied), need only sztemp >= 1.
        In any case, require sztemp >= 1.

Output parameter:

        The forward DFT of the vector q(1:n) is defined as
            for j=1,...,n
                q(j)=the sum from k=1,...,n of q(k)*exp(-i*j*k*2*pi/n)

            where i=sqrt(-1)

        The backward DFT of the vector q(1:n) is defined as
            for j=1,...,n
                q(j)=the sum from k=1,...,n of q(k)*exp(i*j*k*2*pi/n)

            where i=sqrt(-1)

        A forward transform followed by a backward transform will multiply
        the original sequence by  n.

Other parameter:

wktemp  Temporary double precision workspace of length at least
        sztemp + 8*t*(p-1)*(lq/b/p + (1+2*t)*log2(lq/b) + log2(p) + 2)
               + 12*p*(b + 3) + 3*t

---------------------------------------------------------------------------

Using a different sequential FFT routine

---------------------------------------------------------------------------

Read this section if you would prefer to use a sequential FFT routine
other than the one from FFTPACK.

* Instead of linking with fftpack.o, link with the appropriate FFT
  routines or library containing them.

* The subprogram  fftcall.f  must be modified appropriately:

  We have provided for FFT routines with one subprogram for
  initialization and another for computation of the transform.
  Sequential FFT routines may require two types of workspaces:
  * a workspace  wkkeep  that is initialized and must not be modified
    between calls to the transform computation routine;
  * a temporary workspace  wktemp  that may be modified between calls
    to the transform computation routine.

  The subroutine myffti(len, wkkeep, wktemp, szkeep, sztemp)
  initializes the workspace  wkkeep  for a forward FFT of length len.

  Here,  szkeep  is the length of  wkkeep, and  sztemp  is the length
  of  wktemp, as double precision arrays.
  We require both to be at least 1.
                  szkeep                      sztemp
  FFTPACK:         4*len + 15                    1
  SCILIB:          5*len                         1
  ESSL (IBM):  (228*len)/100+20000       (228*len)/100+20000

  Examples of calling the initialization routines.
  FFTPACK:  call dcffti(len, wkkeep)
  SCILIB:   call cfft2(1, -1, len, arg, wkkeep, arg)
          where arg is a double precision variable
  ESSL:     call dcft(1, arg, 1, len, arg, 1, len, len, 1, 1, 1d0,
                      wkkeep, szkeep, wktemp, sztemp)
          where arg is a double precision variable

  The subroutine myfft(len, x, wkkeep, wktemp, szkeep, sztemp)
  performs the forward FFT on the vector  x  of length  len.

  Examples of calling the forward FFT routines.
  FFTPACK:  call dcfftf(len, x, wkkeep)
  SCILIB:   call cfft2(0, -1, len, x, wkkeep, x)
  ESSL:     call dcft(0, x, 1, len, x, 1, len, len, 1, 1, 1d0,
                      wkkeep, szkeep, wktemp, sztemp)

* Workspace sizes  szkeep  and  sztemp  must be adjusted appropriately
  in the calling program.
